

(1) Found Hidden column
(2) Found Hidden row
(3) Found Marge cell
(4) Find Duplicate row
(5) Find duplicate value 
(6) Find Spacial character 





########################################

(1)Hidden  Column found

#######################################

package com.cdphp.PIMS_MemberBenefitRules;

import junit.framework.Assert;

 

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

//import org.apache.poi.ss.usermodel.CellType;

import org.junit.Test;

 

import com.cdphp.helpers.LoggerHelper;

import com.cdphp.test.CDPHPJUnit4Test;

 

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.util.LinkedHashMap;

import java.util.Map;

@SuppressWarnings("deprecation")

 

public class HiddenColumnFoundTest {

 

     protected static org.apache.log4j.Logger logger = LoggerHelper.getLogger(HiddenColumnFoundTest.class.getSimpleName());

 

    public HiddenColumnFoundTest() {

        super();

    }

 

    @Test

    public void  testhidddenColumnFound() {

        boolean value = false;

        try{

            Map<Integer,Boolean> result = HiddenColumnFoundTest.verifyHiddenColumn();

            System.out.println("Total Number of Column hidden: " + result.size());

            for(Map.Entry<Integer,Boolean> read:result.entrySet()){

                System.out.println("Hidden Column Found at Column Number : " + read.getKey());

                if(read.getValue().equals(true)){

                    value = read.getValue();

                }

            }

            boolean hiddenColumnFound = value;

            if( hiddenColumnFound)

            {

                System.out.println("Hidden Column found: FAIL!");

                Assert.assertFalse(hiddenColumnFound);

            }

            else{

                System.out.println("No Hidden Column found: PASS!");

            }

 

        }catch(FileNotFoundException e){

            e.printStackTrace();

        } catch (IOException e) {

            e.printStackTrace();

        }

    }

    private static Map<Integer,Boolean> verifyHiddenColumn() throws IOException {

        boolean isColumnHidden = false;

        int columnNumber = 0;

        Map<Integer,Boolean> result = new LinkedHashMap<Integer,Boolean>();

        String inputXLSFile = "Data/Input/PIMS_Test_PASS.Xls";

        FileInputStream fs = new FileInputStream(inputXLSFile);

        HSSFWorkbook ws=null;

        try {

            ws = new HSSFWorkbook(fs);

        } catch (IOException e) {

            e.printStackTrace();

        }

        HSSFSheet sheet = ws.getSheet("benefits_coverage");

        int totalNoOfRows = sheet.getPhysicalNumberOfRows();

        System.out.println("Count row number :"+totalNoOfRows);

        if( totalNoOfRows>0) {

            int totalColumn =  sheet.getRow(0).getPhysicalNumberOfCells();

            System.out.println("Count column number :"+totalColumn);

            for (int i = 0; i<totalColumn; i++) {

                    isColumnHidden = sheet.isColumnHidden(i);

                    if(isColumnHidden==true){

                        columnNumber = i;

                        result.put(columnNumber,isColumnHidden);

                    }

                }

            }

 

        return result;

       

    }

}

 

#######################################

(2)HiddenRow found 

#######################################

package com.cdphp.PIMS_MemberBenefitRules;

import junit.framework.Assert;

import org.apache.poi.hssf.usermodel.HSSFCell;

import org.apache.poi.hssf.usermodel.HSSFRow;

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.junit.Test;

import com.cdphp.helpers.LoggerHelper;

 

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.util.LinkedHashMap;

import java.util.Map;

 

public class HiddenRowFoundTest {

 

                protected static org.apache.log4j.Logger logger = LoggerHelper.getLogger(HiddenRowFoundTest.class.getSimpleName());

 

                public HiddenRowFoundTest () {

                                super();

                }

 

                @SuppressWarnings("deprecation")

                @Test

                public void testhidddenrowsfound() {

                                try{

                                                boolean value = false;                                   

                                                Map<Integer,Boolean> result = HiddenRowFoundTest.verifyHiddenRows();

                                                System.out.println("Total Number of Row hidden is : " + result.size());

                                                for(Map.Entry<Integer,Boolean> read:result.entrySet()){

 

                                                                if(read.getValue().equals(true)){

                                                                                value = read.getValue();

                                                                }

                                                }

                                                boolean hiddenrowfound = value;

 

                                                if( hiddenrowfound)

                                                {

                                                                System.out.println("Hidden row found: FAIL!");

                                                                Assert.assertFalse(hiddenrowfound);

                                                }

                                                else{

                                                                System.out.println("No Hidden row found: PASS!");

 

                                                }

 

                                }catch(FileNotFoundException e){

 

                                                e.printStackTrace();

 

                                                logger.info("Exception in Junit test class--"+e.getMessage());

 

                                } catch (IOException e) {

                                                e.printStackTrace();

                                }

                }

                private static Map<Integer,Boolean> verifyHiddenRows() throws IOException {

                                boolean isRowHidden = false;

                                boolean isColumnHidden = false;

                                boolean hiddenRowFound=false;

                                int rowNumber1=0;

 

                                Map<Integer,Boolean> result = new LinkedHashMap<Integer,Boolean>();

                                StringBuilder sb = new StringBuilder();

                                boolean hiddenrowsFound=false;

 

                                logger.info("Implementation Constructor Complete");

 

        logger.info("Running Java Version: " + System.getProperty("java.version"));

 

                                String inputXLSFile = "Data/Input/PIMS_Test_PASS.Xls";

 

                                System.out.println(inputXLSFile);

 

                                FileInputStream fs = new FileInputStream(inputXLSFile);

 

                                HSSFWorkbook ws=null;

 

                                try {

                                                ws = new HSSFWorkbook(fs);

 

                                } catch (IOException e) {

                                                e.printStackTrace();

                                }

                                HSSFSheet sheet = ws.getSheet("benefits_coverage");

                                int totalNoOfRows = sheet.getPhysicalNumberOfRows();

                                System.out.println("Count row number :"+totalNoOfRows);

                                if( totalNoOfRows>0) {

                                                int totalColumn = sheet.getRow(0).getPhysicalNumberOfCells();

                                                System.out.println("Count column number :"+totalColumn);

 

                                                for (int i = 0; i<totalNoOfRows; i++) {

                                                                String str="";

                                                                sb.setLength(0);

                                                                HSSFRow row1 = sheet.getRow(i);

 

                                                                isRowHidden= row1.getZeroHeight();

                                                                if(isRowHidden) {

                                                                                hiddenRowFound=true;

                                                                                rowNumber1=row1.getRowNum();

                                                                                result.put(rowNumber1,hiddenRowFound);

                                                                                System.out.println("Hidden Row Found in Row Number" + row1.getRowNum());

                                                                }

                                                                for (int j = 0 ; j <totalColumn; j++){

                                                                                isColumnHidden = sheet.isColumnHidden(j);

                                                                                if(row1!=null){

                                                                                                HSSFCell cell = row1.getCell(j);

                                                                                                int rowNumber = row1.getRowNum();

                                                                                                if(cell!=null){

                                                                                                                isRowHidden = cell.getCellStyle().getHidden();

                                                                                                                //System.out.println();

                                                                                                                int columnNumber=cell.getColumnIndex();

                                                                                                                int type = cell.getCellType();

                                                                                                                if(type==0){

                                                                                                                                double intValue= cell.getNumericCellValue();

                                                                                                                                str=String.valueOf(intValue);

                                                                                                                }else if(type==1){

                                                                                                                                str=cell.getStringCellValue();

                                                                                                                }

                                                                                                }

                                                                                }

                                                                                sb.append(str);

                                                                }

 

                                                }

                                }

                               

                                return result;

                }

 

}

  

###########################################

(3)Find marge cell 

###########################################

package com.cdphp.PIMS_MemberBenefitRules;

 

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.util.ArrayList;

import java.util.LinkedHashMap;

import java.util.List;

import java.util.Map;

 

import junit.framework.Assert;

 

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.apache.poi.ss.util.CellRangeAddress;

import org.junit.Test;

import com.cdphp.helpers.LoggerHelper;

 

@SuppressWarnings("deprecation")

 

public class MergeCellFoundTest  {

                protected static org.apache.log4j.Logger logger = LoggerHelper.getLogger(MergeCellFoundTest.class.getSimpleName());

 

                public MergeCellFoundTest() {

                                super();

                }

 

                @Test

                public void testmargecellfound() {

                                try{

                                                Map<Integer,List<Integer>> value = isColumnMerged();

                                                boolean testmergedCellFound = false;

                               

                                                int rowNumber = 0;

                                                if(value.size()>0) {

                                                                if(value.containsKey(9) && value.containsKey(10)){

                                                                                testmergedCellFound = true;

                                                                }

                                                }

                                               

                                                if( testmergedCellFound)

                                                {

                                                                System.out.println("Merge row found row number # 10&11: pass!");

                                                               

                                                                for(Map.Entry<Integer,List<Integer>> list:value.entrySet()){

                                                                                rowNumber = list.getKey();

                                                                                //System.out.println("Merged Row Found in Row Numbers: " +rowNumber);

                                                                }

                                                               

                                                }else{

                                                                System.out.println("No Merge row found in either of row # 10 & 11 or none of them has merged: Fail!");

                                                                Assert.assertTrue(testmergedCellFound);

                                               

 

                                                }

 

                                }catch(FileNotFoundException e){

 

                                                e.printStackTrace();

 

                                                //logger.info("Exception in Junit test class--"+e.getMessage());

 

                                } catch (IOException e) {

                                                e.printStackTrace();

                                }

                }             

                public static Map<Integer,List<Integer>> isColumnMerged() throws FileNotFoundException {

                                boolean result = false;

                                Map<Integer,List<Integer>> resultData = new LinkedHashMap<Integer,List<Integer>>();

 

                                String inputXLSFile = "Data/Input/PIMS_Ruls.Xls";

                                System.out.println(inputXLSFile);

                                FileInputStream fs = new FileInputStream(inputXLSFile);

                                HSSFWorkbook wb = null;

 

                                try {

                                                wb = new HSSFWorkbook(fs);

 

                                } catch (IOException e) {

                                                e.printStackTrace();

                                }

                                HSSFSheet sheet = wb.getSheet("benefits_coverage");

                                int totalRows = sheet.getPhysicalNumberOfRows();

                                int totalColumn = sheet.getRow(0).getPhysicalNumberOfCells();

                                System.out.println("Count row number :"+totalRows);

                                System.out.println("Count column number :"+totalColumn);

                                int limit = sheet.getNumMergedRegions();

                                for(int i=0; i<limit; i++){

                                                List<Integer> rowRange = new ArrayList<Integer>();

                                                CellRangeAddress cellRangeAddress = sheet.getMergedRegion(i);

                                                int rowNum = cellRangeAddress.getFirstRow();

                                                int firstColumn = cellRangeAddress.getFirstColumn();

                                                int lastColumn = cellRangeAddress.getLastColumn();

                                                firstColumn=firstColumn+1;

                                                lastColumn=lastColumn+1;

                                                rowRange.add(firstColumn);

                                                rowRange.add(lastColumn);

                                                resultData.put(rowNum,rowRange);

                                                rowRange = null;

                                                rowNum=rowNum+1;

                                                System.out.println("Row Number: " + rowNum + " merged from "+" Cell " + firstColumn+ " to "+lastColumn);

                                }

 

                                return resultData;

                }

                public static void main(String[] args) throws FileNotFoundException {

                                Map<Integer,List<Integer>> value = isColumnMerged();

                                for(Map.Entry<Integer,List<Integer>> list:value.entrySet()){

                                                for(int i=0; i<list.getValue().size(); i++) {

                                                               

                                                }

                                }

                }

 

}

##################################################################

(4)Duplicate row found

##################################################################

package com.cdphp.test;

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.util.ArrayList;

import junit.framework.Assert;

import org.apache.log4j.Logger;

import org.apache.poi.hssf.usermodel.HSSFCell;

import org.apache.poi.hssf.usermodel.HSSFRow;

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.junit.Test;

import com.cdphp.helpers.LoggerHelper;

 

public class DuplicateRowTest extends CDPHPJUnit4Test{

                protected static Logger logger = LoggerHelper.getLogger(CDPHPJUnit4Test.class.getSimpleName());

 

 

                public DuplicateRowTest ()

                {

                                super();

                }

                @SuppressWarnings("deprecation")

 

                @Test

                public void  duplicateFound() {

                                try{

                                                boolean duplicatesFound=DuplicateRowTest.verifyDuplicate();

                                                if( duplicatesFound)

                                                {

                                                                System.out.println("Duplicate Records found: FAIL!");

                                                                Assert.assertFalse(duplicatesFound);

                                                }

                                                else{

                                                                System.out.println("No duplicate Records found: PASS!");

                                                }

                                }catch(FileNotFoundException e){

                                                e.printStackTrace();

                                                logger.info("Exception in Junit test class--"+e.getMessage());

                                }

                }

                private static boolean verifyDuplicate() throws FileNotFoundException

                {

                                ArrayList<String> dupList = new ArrayList<String>();

 

                                StringBuilder sb = new StringBuilder();

                                boolean duplicatesFound=false;

 

                                logger.info("Implementation Constructor Complete");

                                logger.info("Running Java Version: " + System.getProperty("java.version"));

 

 

                                String inputXLSFile = "Data/Input/PIMS_Test1.xls";

                               System.out.println(inputXLSFile);

                                FileInputStream fs = new FileInputStream(inputXLSFile);

 

                                HSSFWorkbook ws=null;

                                try {

                                                ws = new HSSFWorkbook(fs);

                                } catch (IOException e) {

                                                e.printStackTrace();

                                }

                                HSSFSheet sheet = ws.getSheet("benefits_coverage");

                                int totalNoOfRows = sheet.getPhysicalNumberOfRows();

                                System.out.println("Count row number :"+totalNoOfRows);

                                if( totalNoOfRows>0) {

                                                int totalColumn =  sheet.getRow(0).getPhysicalNumberOfCells();

                                                System.out.println("Count column number :"+totalColumn);

                                                for (int i = 0; i<totalNoOfRows; i++) {

                                                                String str="";

                                                                sb.setLength(0);

                                                                HSSFRow row1 = sheet.getRow(i);

 

                                                                for (int j = 0 ; j <totalColumn; j++){

                                                                                if(row1!=null){

                                                                                                HSSFCell cell = row1.getCell(j);

                                                                                                int rowNumber = row1.getRowNum();

                                                                                                if(cell!=null){

                                                                                                                int columnNumber=cell.getColumnIndex();

                                                                                                                int type = cell.getCellType();

                                                                                                                if(type==0){

                                                                                                                                double intValue= cell.getNumericCellValue();

                                                                                                                                str=String.valueOf(intValue);

 

                                                                                                                }else if(type==1){

                                                                                                                                str=cell.getStringCellValue();

                                                                                                                }

                                                                                                                getSpecialCharacterCount(str,rowNumber,columnNumber);

                                                                                                }

                                                                                }

                                                                                sb.append(str);

                                                                }

                                                                String rowValue=sb.toString();

               if (!rowValue.equals("")){

                                                                if (dupList.contains(rowValue)){

                                                                                System.out.println("duplicate record found in Row----"+row1.getRowNum());

                                                                                duplicatesFound = true;

                                                                }

                                                                else{

                                                                                dupList.add(rowValue);

                                                                }

               }

                                                }

                                }

                                return duplicatesFound;

                }

                public static void getSpecialCharacterCount(String str,int rowNumber,int columnNumber) {

 

                                if(!str.equals("")){

                                                String specialCharacters="";

                                                for (int i = 0; i < str.length(); i++) {

                                                                if (specialCharacters.contains(Character.toString(str.charAt(i))))

                                                                {

                                                                                System.out.println(str.charAt(i)+": is a special character found in Row--"+rowNumber+"-and Column--"+columnNumber);

                                                                }

                                                }

                                }

                }

}

 

 

############################################################

(5)Duplicate value found

############################################################

package com.cdphp.test;

 


                import jxl.Sheet;

import jxl.Workbook;

import jxl.read.biff.BiffException;

 

import java.io.FileInputStream;

import java.io.IOException;

 

                public class TestXL {

 

                    public static void main(String[] args) throws IOException, BiffException {

 

                        String FilePath = "Data/Input/PIMS_Test1.xls";

                        FileInputStream fs = new FileInputStream(FilePath);

                        Workbook wb = Workbook.getWorkbook(fs);

 

                        //sheet name

                        Sheet sheet = wb.getSheet("benefits_coverage");

 

                        //Get total number of row

                        int totalNoOfRows = sheet.getRows();

                        System.out.println("Count row number :"+totalNoOfRows);

                        //Get total number column

                        int totalNoColumn = sheet.getColumns();

                        System.out.println("Count row number :"+totalNoColumn);

 

                        //Column to get value

                        int columnNumber = 0;

 

                        for (int row = 0; row < totalNoOfRows; row++) {

                            //loop to compare value for outer loop

                            for (int j = row + 1; j < totalNoOfRows; j++) {

 

                                //find out duplicate

                                if (sheet.getCell(columnNumber, row).getContents().equalsIgnoreCase(sheet.getCell(columnNumber, j).getContents())) {

                                    String message = "Found Duplicate value : " + sheet.getCell(columnNumber, j).getContents() + "    Row No :" + sheet.getCell(columnNumber, j).getRow();

                                    System.out.println(message);

                                    System.out.println("Found Duplicate Row " + sheet.getCell(0, row).getRow());

                                    //System.out.println(">>>>>>> key"+sheet.getCell(columnNumber, j).getContents());

                                    //Add validation for pass or failed

                                     break;

//                              boolean duplicatesFound = false;

//                                            // boolean flag=false;

//                                            //assert.assertFalse(duplicatesFound);

//                                             Assert.assertFalse(duplicatesFound);

//                                                             Assert.assertEquals("A is bad", testA, expectedA);

//                   

                                }

                            }

                        }

 

                        //******************************************************************************************************

 

                /*        Map<String, Integer> valueAndCount = new HashMap<>();

                        for (int row = 0; row < totalNoOfRows; row++) {

                            String value = sheet.getCell(0, row).getContents();

                           // System.out.println("value : " + value);

                            Integer count = valueAndCount.get(value);

                            if (count == null) {

                                valueAndCount.put(value, 1);

                            } else {

                                valueAndCount.put(value, ++count);

                            }

 

                        }*/

 

                    }

 

//                            private static boolean assertFalse(boolean duplicatesFound) {

//                                            // TODO Auto-generated method stub

//                                            return false;

                                }

               

 

 

 

 

 

 

#######################################################

(6) Spacialcharacter found based on column and row using config file

#######################################################

 

package com.cdphp.test;

import java.io.BufferedReader;

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.io.InputStreamReader;

 

import junit.framework.Assert;

 

import org.apache.log4j.Logger;

import org.apache.poi.hssf.usermodel.HSSFCell;

import org.apache.poi.hssf.usermodel.HSSFRow;

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.junit.Test;

 

import com.cdphp.helpers.LoggerHelper;

 

 

public class SpecialCharecterConfigs extends CDPHPJUnit4Test{

                protected static Logger logger = LoggerHelper.getLogger(CDPHPJUnit4Test.class.getSimpleName());

 

 

                public SpecialCharecterConfigs()

                {

                                super();

                }

                @SuppressWarnings("deprecation")

 

                @Test

 

                public void SpacialCharacterFound () {

                                try {

                                                HSSFSheet sheet=SpecialCharecterConfigs.sheetExel();

                                                FileInputStream fstream = new FileInputStream("data/Input/test.txt");

                                                BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

                                                String str;

                                                String[] ar=null;

                                                int lineNumber = 0;

                                                while ((str = br.readLine())!= null) {

                                                                String pattenreg= br.readLine();

 

                                                                lineNumber++;

                                                                if(lineNumber==1){

                                                                                ar=str.split(",");

                                                                                for(int i = 0; i < ar.length; i++){

                                                                                                //System.out.println(" the value-ar["+i+"] = "+ar[i]);

                                                                                                String coumnNum=ar[i];

                                                                                                System.out.println("the column value-:"+coumnNum);

                                                                                                // System.out.println("the value of line"+pattenreg);

                                                                                                int ColumnNumber=Integer.parseInt(coumnNum);

                                                                                                SpecialCharecterConfigs.verifySpecialChar(sheet,ColumnNumber,pattenreg);

                                                                                }                                                                                             

                                                                }

                                                }

                                                br.close();

 

                                } catch (IOException e) {

                                                System.out.println("File Read Error");

                                }

                }

 

                public static HSSFSheet sheetExel() throws FileNotFoundException

                {

 

                                String inputXLSFile = "Data/Input/PIMS_Test1.xls";

                                System.out.println(inputXLSFile);

                                FileInputStream fs = new FileInputStream(inputXLSFile);

 

                                HSSFWorkbook ws = null;

                                try {

                                                ws = new HSSFWorkbook(fs);

                                } catch (IOException e) {

                                                // TODO Auto-generated catch block

                                                e.printStackTrace();

                                }

                                HSSFSheet sheet = ws.getSheet("benefits_coverage");

                                return sheet;

                }

 

                static void verifySpecialChar(HSSFSheet sheet,int ColumnNum,String regEx)

                {

                                String str="";

                                boolean sp = false;

                                int totalNoOfRows = sheet.getPhysicalNumberOfRows();

                                System.out.println("Count row number :"+totalNoOfRows);

                                if( totalNoOfRows>0) {

                                                for (int i = 0; i<totalNoOfRows; i++) {

                                                                HSSFRow row1 = sheet.getRow(i);

                                                                if(row1!=null){

                                                                                HSSFCell cell = row1.getCell(ColumnNum);

                                                                                if(cell!=null){

                                                                                                //check value number or string

 

                                                                                                // int type= cell.getCellType().getCode();

                                                                                                int type= cell.getCellType();

                                                                                                if(type==0){

 

                                                                                                                double intValue= cell.getNumericCellValue();

 

                                                                                                                str=String.valueOf(intValue);

 

                                                                                                }else if(type==1){

 

                                                                                                                str=cell.getStringCellValue();

 

                                                                                                }

 

                                                                                                //  Special character

 

                                                                                                int rowNum=row1.getRowNum();

                

                                                                                                 boolean spFound = SpecialCharecterConfigs.getSpecialCharacterCount(str,regEx,rowNum);

                                                                                                if(spFound){

                                                                                                                sp=true;

                                                                                                }

                                                                                }

                                                                               

                                                                }

                                                }

                                }

                                System.out.println("Pattern for Regular Expression:--"+regEx);

                                if(sp){

                                                Assert.assertFalse(sp);

                                }

                }

                //return duplicatesFound;

 

                // }

 

                public static boolean getSpecialCharacterCount(String str,String regEx,int rowNum) {

                            